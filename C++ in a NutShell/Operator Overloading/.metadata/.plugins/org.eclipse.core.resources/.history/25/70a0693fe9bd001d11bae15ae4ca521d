#include <iostream>



class Complex{
private:
	int real;
	int imag;
public:
	Complex(){
		real = 0;
		imag = 0;
	}

    Complex(int r, int i){
    	real = r;
    	imag = i;
    }

    void SetReal(int R);
    void SetImag(int I);
    int GetReal();
    int GetImag();

    Complex AddClx(Complex& c1, Complex& c2){
    	Complex X;
    	X.real = c1.real + c2.real;
    	X.imag = c1.imag + c2.imag;
    	return X;
    }

     /* ===> Some Operators Overloading <=== */
    friend Complex operator + (Complex& c1, Complex& c2);
    friend Complex operator - (Complex& c1, Complex& c2);
    friend Complex operator * (Complex& c1, Complex& c2);
    friend Complex operator / (Complex& c1, Complex& c2);

    friend Complex operator += (Complex& c1, Complex& c2);
    friend Complex operator -= (Complex& c1, Complex& c2);
    friend Complex operator *= (Complex& c1, Complex& c2);
    friend Complex operator /= (Complex& c1, Complex& c2);

    //friend Complex operator ++ (Complex& c1); //prefix
    friend Complex operator -- (Complex& c1); //prefix
    Complex& operator ++ (); //prefix
    Complex& operator -- (); //prefix
    friend Complex operator ++ (Complex& c1, int); //postfix, Note that the 2nd arg must be "int" datatype.
    friend Complex operator -- (Complex& c1, int); //postfix, Note that the 2nd arg must be "int" datatype.




    //Complex operator = (Complex& c1, Complex& c2);

};


void Complex::SetReal(int R){
	this -> real = R;
}

void Complex::SetImag(int I){
	this -> imag = I;
}

int Complex::GetReal(){
	return (this->real);
}

int Complex::GetImag(){
	return (this -> imag);
}

//============================================================================//

Complex operator + (Complex& c1, Complex& c2)
{
    Complex Y;
    //I can use my class method AddClx:
	Y = Y.AddClx(c1,c2);  //OR make it manually:

	//Y.real = c1.real + c2.real;
	//Y.imag = c1.imag + c2.imag;

	std::cout<<Y.real<<" + "<<Y.imag<<"i"<<std::endl;
	return Y;
}

Complex operator - (Complex& c1, Complex& c2)
{
    Complex Y;

	Y.real = c1.real - c2.real;
	Y.imag = c1.imag - c2.imag;

	std::cout<<Y.real<<" + "<<Y.imag<<"i"<<std::endl;
	return Y;
}

Complex operator * (Complex& c1, Complex& c2)
{
    Complex Y;

	Y.real = c1.real * c2.real;
	Y.imag = c1.imag * c2.imag;

	std::cout<<Y.real<<" + "<<Y.imag<<"i"<<std::endl;
	return Y;
}

Complex operator / (Complex& c1, Complex& c2)
{
    Complex Y;

	Y.real = c1.real / c2.real;
	Y.imag = c1.imag / c2.imag;

	std::cout<<Y.real<<" + "<<Y.imag<<"i"<<std::endl;
	return Y;
}

//============================================================================//

Complex operator += (Complex& c1, Complex& c2){
	c1.real += c2.real;
	c1.imag += c2.imag;

	std::cout<<c1.real<<" + "<<c1.imag<<"i"<<std::endl;
	return c1;
}

Complex operator -= (Complex& c1, Complex& c2){
	c1.real -= c2.real;
	c1.imag -= c2.imag;

	std::cout<<c1.real<<" + "<<c1.imag<<"i"<<std::endl;
	return c1;
}

Complex operator *= (Complex& c1, Complex& c2){
	c1.real *= c2.real;
	c1.imag *= c2.imag;

	std::cout<<c1.real<<" + "<<c1.imag<<"i"<<std::endl;
	return c1;
}

Complex operator /= (Complex& c1, Complex& c2){
	c1.real /= c2.real;
	c1.imag /= c2.imag;

	std::cout<<c1.real<<" + "<<c1.imag<<"i"<<std::endl;
	return c1;
}

//==================================Prefix==========================================//

/*
Complex operator ++ (Complex& c1){
	c1.real ++;
	c1.imag ++;

	std::cout<<c1.real<<" + "<<c1.imag<<"i"<<std::endl;
	return c1;
}
*/

/*
Complex operator -- (Complex& c1){
	c1.real --;
	c1.imag --;

	std::cout<<c1.real<<" + "<<c1.imag<<"i"<<std::endl;
	return c1;
}
*/

Complex& Complex::operator ++ (){
	real++;
	imag++;
	std::cout<<this->real<<" + "<<this->imag<<"i"<<std::endl;
    return *this;
}

Complex& Complex::operator -- (){
	real--;
	imag--;
	std::cout<<this->real<<" + "<<this->imag<<"i"<<std::endl;
    return *this;
}

//==================================Postfix==========================================//

Complex operator ++ (Complex& c1, int){
	c1.real++;
	c1.imag++;
	std::cout<<c1.real<<" + "<<c1.imag<<"i"<<std::endl;
    return c1;
}

Complex operator -- (Complex& c1, int){
	c1.real--;
	c1.imag--;
	std::cout<<c1.real<<" + "<<c1.imag<<"i"<<std::endl;
    return c1;
}

//============================================================================//




int main()
{
	Complex C1(5,10);
	Complex C2(20,6);


     // C1 = C2 + C1;
     // C1 = C2 - C1;
     // C1 = C2 * C1;
     // C1 = C2 / C1;

     // C1 += C2;
	 // C1 -= C2;
	 // C1 *= C2;
	 // C1 /= C2;

	 // ++C1;
      --C1;

     //C1++;
	 //C1--;

     int A = 5 , B = 10;

     A = A+B;

	return 0;
}




