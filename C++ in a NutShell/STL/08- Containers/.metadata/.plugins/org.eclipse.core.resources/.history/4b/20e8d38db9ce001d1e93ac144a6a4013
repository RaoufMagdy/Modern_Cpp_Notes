#include <iostream>
#include <algorithm>
#include <string>
#include <map>



// std::map:
// - Similar to dictionary.
// - Elements are stores as Key,Value pairs (std::pair).
// - Ordered by key.
// - No duplicated elements.
// - Direct element access using the key.
// - All iterators are available a nd invalidate when the corresponding element is deleted.







class Person{
private:
    int age;
    std::string name;

public:
    Person() = default;

    Person(std::string Name, int Age)
    {
        name = Name;
         age = Age;
    }

    friend std::ostream& operator << (std::ostream& os, const Person& obj)
    {
        os<<obj.name<<" is "<<obj.age<<" years old"<<std::endl;
        return os;
    }

    void operator = (const Person& obj)
    {
    	 age = obj.age;
    	name = obj.name;
    }

    bool operator < (const Person& obj) const
    {
         return( (this->age < obj.age)&&(this->name < obj.name) );
    }

    bool operator > (const Person& obj) const
    {
         return( (this->age > obj.age)&&(this->name > obj.name) );
    }


    bool operator == (const Person& obj) const
    {
         return( (this->age == obj.age)&&(this->name == obj.name) );
    }

    /*
    void display(const std::map<std::string, Person> &m)
    {
    	for(const auto &i : m)
    	{
    		std::cout<<m.first
    	}
    }
    */


    ~Person() {}

};





int main(void)
{
	Person P1{"Ramy",25}, P2{"Maghraby",26}, P3{"Mario",27}, P4{"Negm",28};

	std::map<std::string, Person> Players{
		{"Player1",P1},
		{"Player2",P2},
		{"Player3",P3},
		{"Player4",P4}
	};

	Players["Player5"] = Person{"Bishoy",30};

	Players.at("Player2") = Person{"Islam",22}; //update value

	std::cout<<Players.second<<std::endl;




	return 0;
}





