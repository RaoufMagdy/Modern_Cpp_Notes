#include <iostream>
#include <vector>
#include <list>
#include <map>
#include <cctype>
#include <algorithm>






class Person{
private:
	std::string name;
	int age;
public:
	Person() = default;

	Person(std::string Name, int Age)
	{
		name = Name;
		age = Age;
	}

	bool operator < (const Person& obj)
	{
		return (this->age < obj.age);
	}

	bool operator == (const Person& obj)
	{
		return ( (this->name == obj.name)&&(this->age == obj.age) );
	}

	friend std::ostream& operator << (std::ostream& os, const Person& obj)
	{
		os<<obj.name<<" "<<obj.age<<std::endl;
	}

	~Person(){}

};




void find_test(void)
{

	std::vector<int> vec{1,2,31,4,5};
                 //The element we want to find = 31.
	auto loc = std::find(vec.begin(), vec.end(), 31);

	if(loc != vec.end()){
		std::cout<<"The element was found = "<<*loc<<std::endl;
	} else {
		std::cout<<"Element couldn't be found!"<<std::endl;
	}

	std::cout<<std::endl;
	std::cout<<std::endl;

	std::list<Person> players{
		{"Larry",18},
		{"Harry",20},
		{"Potter",21},
	};

	auto loc1 = std::find(players.begin(), players.end(), Person{"Moe",22});
	// Note that the stl anlgorith will use the operator "==" to find the required player

	if(loc1 != players.end()){
			std::cout<<"The player was found = "<<*loc1<<std::endl;
		} else {
			std::cout<<"Player couldn't be found!"<<std::endl;
		}


}



int main(void)
{

	find_test();

	return 0;
}






