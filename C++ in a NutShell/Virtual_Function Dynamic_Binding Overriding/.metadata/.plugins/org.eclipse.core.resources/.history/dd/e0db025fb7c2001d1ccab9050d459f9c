#include <iostream>



using namespace std;
////////////////////////////////////////////////////////////////
class Base //base class
{
public:
	void show() //normal function
	{ cout << "Base\n"; }
};
////////////////////////////////////////////////////////////////
class Derv1 : public Base //derived class 1
{
public:
	void show()
	{ cout << "Derv1\n"; }
};
////////////////////////////////////////////////////////////////
class Derv2 : public Base //derived class 2
{
public:
	void show()
	{ cout << "Derv2\n"; }
};
////////////////////////////////////////////////////////////////
int main()
{
	Derv1 dv1; //object of derived class 1
	Derv2 dv2; //object of derived class 2
	Base* ptr; //pointer to base class

	ptr = &dv1; //put address of dv1 in pointer
	ptr->show(); //execute show()

	ptr = &dv2; //put address of dv2 in pointer
	ptr->show(); //execute show()

	return 0;
}

/*
 *  But wait—how can we get away with this? Doesn’t the compiler complain that we’re assigning
 *	an address of one type (Derv1) to a pointer of another (Base)? On the contrary, the compiler is
 *	perfectly happy, because type checking has been relaxed in this situation, for reasons that will
 *	become apparent soon. The rule is that pointers to objects of a derived class are typecompatible
 *	with pointers to objects of the base class.
 */





